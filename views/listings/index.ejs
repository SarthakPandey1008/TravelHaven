
<% layout("/layouts/boilerplate")%>
<style>



</style>

<div class="form-container">
    <form action="/listings/category" method="get" id="categoryForm">
        <button id="scroll-left" class="scroll-btn lthan" type="button" disabled>&lt;</button>
        <div id="filters-container">
        <div id="filters">
            <div class="filter first-filter <%= selectedCategory === 'explore' ? 'selected' : '' %>" onclick="setCategory('explore', this)">
                <div><i class="fa-solid fa-compass"></i></div>
                <p>Explore</p>
            </div>
            <div class="filter <%= selectedCategory === 'trending' ? 'selected' : '' %>" onclick="setCategory('trending', this)" >
                <div><i class="fa-solid fa-fire"></i></div>
                <p>Trending</p>
            </div>
            <div class="filter <%= selectedCategory === 'amazing pools' ? 'selected' : '' %>" onclick="setCategory('amazing pools', this)">
                <div><i class="fa-solid fa-water-ladder"></i></div>
                <p>Amazing Pools</p>
            </div>
            <div class="filter <%= selectedCategory === 'beach' ? 'selected' : '' %>" onclick="setCategory('beach', this)">
                <div><i class="fa-solid fa-umbrella-beach"></i></div>
                <p>Beach</p>
            </div>
            <div class="filter <%= selectedCategory === 'castles' ? 'selected' : '' %>" onclick="setCategory('castles', this)">
                <div><i class="fa-solid fa-chess-rook"></i></div>
                <p>Castles</p>
            </div>
            <div class="filter <%= selectedCategory === 'new' ? 'selected' : '' %>" onclick="setCategory('new', this)">
                <div><i class="fa-solid fa-key"></i></div>
                <p>New</p>
            </div>
            <div class="filter <%= selectedCategory === 'iconic cities' ? 'selected' : '' %>" onclick="setCategory('iconic cities', this)">
                <div><i class="fa-solid fa-tree-city"></i></div>
                <p>Iconic Cities</p>
            </div>
            <div class="filter <%= selectedCategory === 'rooms' ? 'selected' : '' %>" onclick="setCategory('rooms', this)">
                <div><i class="fa-solid fa-bed"></i></div>
                <p>Rooms</p>
            </div>
             
            <div class="filter <%= selectedCategory === 'boats' ? 'selected' : '' %>" onclick="setCategory('boats',this)">
                <div><i class="fa-solid fa-ship"></i></div>
                <p>Boats</p>
            </div>
            <div class="filter <%= selectedCategory === 'domes' ? 'selected' : '' %>" onclick="setCategory('domes', this)">
                <div><i class="fa-solid fa-igloo"></i></div>
                <p>Domes</p>
            </div>
           
            <div class="filter <%= selectedCategory === 'mountains' ? 'selected' : '' %>" onclick="setCategory('mountains', this)">
                <div><i class="fa-solid fa-mountain"></i></div>
                <p>Mountains</p>
            </div>
            <div class="filter <%= selectedCategory === 'camping' ? 'selected' : '' %>" onclick="setCategory('camping', this)">
                <div><i class="fa-solid fa-tents"></i></div>
                <p>Camping</p>
            </div> 

            <div class="filter <%= selectedCategory === 'farms' ? 'selected' : '' %>" onclick="setCategory('farms', this)">
                <div><i class="fa-solid fa-cow"></i></div>
                <p>Farms</p>
            </div>
            <div class="filter <%= selectedCategory === 'arctic' ? 'selected' : '' %>" onclick="setCategory('arctic', this)">
                <div><i class="fa-regular fa-snowflake"></i></div>
                <p>Arctic</p>
            </div>

            
            <div class="filter <%= selectedCategory === 'cabin' ? 'selected' : '' %>" onclick="setCategory('cabin', this)">
                <div><i class="fa-solid fa-house"></i></div>
                <p>Cabin</p>
            </div>
            <div class="filter <%= selectedCategory === 'national park' ? 'selected' : '' %>" onclick="setCategory('national park', this)">
                <div><i class="fa-solid fa-tree"></i></div>
                <p>National Park</p>
            </div>
            
            <div class="filter <%= selectedCategory === 'treehouses' ? 'selected' : '' %>" onclick="setCategory('treehouses', this)" style="margin-right: 5rem;">
                <div><i class="fa-solid fa-warehouse"></i></div>
                <p>Treehouses</p>
            </div>
           </div>
           
        </div>
        <button id="scroll-right" class="scroll-btn gthan" type="button" disabled>&gt;</button>
        <input type="hidden" name="category" id="selectedCategory" value="<%= selectedCategory %>">
        <button type="submit" style="display: none;">Search</button>
        
    </form>
        <div class="tax-toggle">
            <div class="form-check-reverse form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                <label class="form-check-label" for="flexSwitchCheckDefault">Display total after taxes</label>
              </div>
        </div>
     </div>
    </div>

  


    <div class="listings-container mx-lg-5 mx-md-3 mx-sm-1">
        <div class="custom-row custom-cols mt-3">
        
        <% for (listing of allListings){ %>
            <a href="/listings/<%= listing._id %>" class="listing-link">
            <div class="card col listing-card" >
                <img src="<%=listing.image.url%>" class="card-img-top" alt="listing-image" style="height: 20rem;">
                <div class="card-img-overlay"></div>
                <div class="card-body">
        
                <p class="card-text">
                    <b><%= listing.title %></b><br>
                    <span class="price" data-original-price="<%= listing.price %>">
                        &#8377; <span class="display-price"><%= listing.price.toLocaleString("en-IN") %></span> / night
                    </span>
                    <span class="tax-info" style="display:none;">&nbsp; (<i>including 18% GST</i> )</span>
                </p>
                </div>
              </div>
              </a>
              <% } %>
    </div>
    </div>
<!-- 
    <script>
        let taxSwitch = document.getElementById("flexSwitchCheckDefault");
        taxSwitch.addEventListener("click", () =>{
           let taxInfo = document.getElementsByClassName("tax-info");
           console.log(taxInfo);
           for(info of taxInfo){
            if(info.style.display != "inline"){
                info.style.display = "inline";
            } else{
                info.style.display = "none";
            }
           
           }
        })
    </script> -->
    <script>
      // Tax toggle functionality
 const taxSwitch = document.getElementById("flexSwitchCheckDefault");
 
 // Load the saved state from sessionStorage and apply it to the toggle switch
 const savedState = sessionStorage.getItem('taxToggleState');
 taxSwitch.checked = savedState === 'true'; // Set toggle based on saved state
 
 // Function to update prices based on toggle state
 const updatePrices = () => {
     const prices = document.getElementsByClassName("price");
 
     for (let price of prices) {
         const originalPrice = parseFloat(price.getAttribute("data-original-price"));
         const displayPrice = price.querySelector(".display-price");
         const taxInfo = price.nextElementSibling; // Get the tax-info span
 
         if (taxSwitch.checked) {
             const taxAmount = originalPrice * 0.18; // 18% tax
             const totalPrice = originalPrice + taxAmount;
             displayPrice.innerHTML = totalPrice.toLocaleString("en-IN");
             taxInfo.style.display = "inline"; // Show the tax info
         } else {
             displayPrice.innerHTML = originalPrice.toLocaleString("en-IN");
             taxInfo.style.display = "none"; // Hide the tax info
         }
     }
 };
 
 // Initial price update based on toggle state
 updatePrices();
 
 // Add event listener to update sessionStorage and prices when the toggle state changes
 taxSwitch.addEventListener("change", () => {
     sessionStorage.setItem('taxToggleState', taxSwitch.checked);
     updatePrices(); // Update prices whenever the toggle is changed
 });
 
 function savedScroll() {
     const scrollContainer = document.getElementById('filters-container');
     
     // Check if there's a saved scroll position in sessionStorage
     const savedScrollPosition = sessionStorage.getItem('scrollPosition');
     
     if (savedScrollPosition) {
         // Restore the scroll position (without clearing it immediately)
         scrollContainer.scrollLeft = parseInt(savedScrollPosition, 10);
     }
 };
 
 savedScroll();
 
 // Function to set category
 function setCategory(category, element) {
    // Check if the clicked category is already selected
    if (element.classList.contains('selected')) {
        return; // Do nothing if the category is already selected
    }

    const scrollContainer = document.getElementById('filters-container');

    // Save the current scroll position to sessionStorage
    sessionStorage.setItem('scrollPosition', scrollContainer.scrollLeft);

    // Set the selected category value in the hidden input
    document.getElementById('selectedCategory').value = category;

    // Remove the 'selected' class from all filters
    let filters = document.getElementsByClassName('filter');
    for (let filter of filters) {
        filter.classList.remove('selected');
    }

    // Instead of using querySelector, directly use the passed element
    element.classList.add('selected');

    // Automatically submit the form
    document.getElementById('categoryForm').submit();
}

 
 // Toggle switch functionality
 const toggleSwitch = document.getElementById('flexSwitchCheckDefault');
 
 // Load the saved state from sessionStorage and apply it to the toggle switch
 const toggleSavedState = sessionStorage.getItem('taxToggleState');
 if (toggleSavedState === 'true') {
     toggleSwitch.checked = true;  // Set toggle to ON if saved state is 'true'
 } else {
     toggleSwitch.checked = false; // Set toggle to OFF otherwise
 }
 
 // Add event listener to update sessionStorage when the toggle state changes
 toggleSwitch.addEventListener('change', function() {
     sessionStorage.setItem('taxToggleState', toggleSwitch.checked);
 });
 
 function scrollsign() {
     const scrollContainer = document.getElementById('filters-container');
     const scrollLeftBtn = document.getElementById('scroll-left');
     const scrollRightBtn = document.getElementById('scroll-right');
     
     // Scroll amount (adjust based on preference)
     const scrollAmount = 150; // pixels
 
     // Disable buttons based on the initial scroll position
     function updateButtonState() {
    const buffer = 10; // You can adjust this value to control how early the button disables
    // Disable the left button if we're at the start
    scrollLeftBtn.disabled = scrollContainer.scrollLeft === 0;
    // Disable the right button a little earlier by subtracting the buffer from the calculation
    scrollRightBtn.disabled = scrollContainer.scrollLeft + scrollContainer.clientWidth >= scrollContainer.scrollWidth - buffer;
}

 
     // Scroll left button click event
     scrollLeftBtn.addEventListener('click', function() {
         scrollContainer.scrollBy({
             left: -scrollAmount,
             behavior: 'smooth'
         });
     });
 
     // Scroll right button click event
     scrollRightBtn.addEventListener('click', function() {
         scrollContainer.scrollBy({
             left: scrollAmount,
             behavior: 'smooth'
         });
     });
 
     // Listen to the scroll event and update button states accordingly
     scrollContainer.addEventListener('scroll', function() {
         updateButtonState();
     });
 
     // Restore the saved scroll position (if any) from sessionStorage
     const savedScrollPosition = sessionStorage.getItem('scrollPosition');
     if (savedScrollPosition) {
         scrollContainer.scrollLeft = parseInt(savedScrollPosition, 10);
     }
 
     // Update button state immediately after script is executed
     updateButtonState();
 }
 
 // Save scroll position before leaving the page or reloading
 window.addEventListener('beforeunload', function () {
     const scrollContainer = document.getElementById('filters-container');
     // Save the current scroll position in sessionStorage
     sessionStorage.setItem('scrollPosition', scrollContainer.scrollLeft);
 });
 
 // Immediately call the scrollsign function when the script loads
 scrollsign();
     
     </script>
     

